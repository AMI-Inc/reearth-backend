// Code generated by gen, DO NOT EDIT.

package dataloader

import (
	"context"
	"time"

	"github.com/reearth/reearth-backend/internal/adapter/graphql"
	"github.com/reearth/reearth-backend/internal/usecase"
	"github.com/reearth/reearth-backend/pkg/id"
)

type DatasetDataLoader interface {
	Load(id.DatasetID) (*graphql.Dataset, error)
	LoadAll([]id.DatasetID) ([]*graphql.Dataset, []error)
}

func newDataset(ctx context.Context, c *graphql.DatasetController, o *usecase.Operator) *DatasetLoader {
	return NewDatasetLoader(DatasetLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.DatasetID) ([]*graphql.Dataset, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryDataset(ctx context.Context, c *graphql.DatasetController, o *usecase.Operator) DatasetDataLoader {
	return &ordinaryDatasetLoader{
		fetch: func(keys []id.DatasetID) ([]*graphql.Dataset, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryDatasetLoader struct {
	fetch func(keys []id.DatasetID) ([]*graphql.Dataset, []error)
}

func (l *ordinaryDatasetLoader) Load(key id.DatasetID) (*graphql.Dataset, error) {
	res, errs := l.fetch([]id.DatasetID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryDatasetLoader) LoadAll(keys []id.DatasetID) ([]*graphql.Dataset, []error) {
	return l.fetch(keys)
}

type LayerDataLoader interface {
	Load(id.LayerID) (*graphql.Layer, error)
	LoadAll([]id.LayerID) ([]*graphql.Layer, []error)
}

func newLayer(ctx context.Context, c *graphql.LayerController, o *usecase.Operator) *LayerLoader {
	return NewLayerLoader(LayerLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.LayerID) ([]*graphql.Layer, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryLayer(ctx context.Context, c *graphql.LayerController, o *usecase.Operator) LayerDataLoader {
	return &ordinaryLayerLoader{
		fetch: func(keys []id.LayerID) ([]*graphql.Layer, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryLayerLoader struct {
	fetch func(keys []id.LayerID) ([]*graphql.Layer, []error)
}

func (l *ordinaryLayerLoader) Load(key id.LayerID) (*graphql.Layer, error) {
	res, errs := l.fetch([]id.LayerID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryLayerLoader) LoadAll(keys []id.LayerID) ([]*graphql.Layer, []error) {
	return l.fetch(keys)
}

type PluginDataLoader interface {
	Load(id.PluginID) (*graphql.Plugin, error)
	LoadAll([]id.PluginID) ([]*graphql.Plugin, []error)
}

func newPlugin(ctx context.Context, c *graphql.PluginController, o *usecase.Operator) *PluginLoader {
	return NewPluginLoader(PluginLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.PluginID) ([]*graphql.Plugin, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryPlugin(ctx context.Context, c *graphql.PluginController, o *usecase.Operator) PluginDataLoader {
	return &ordinaryPluginLoader{
		fetch: func(keys []id.PluginID) ([]*graphql.Plugin, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryPluginLoader struct {
	fetch func(keys []id.PluginID) ([]*graphql.Plugin, []error)
}

func (l *ordinaryPluginLoader) Load(key id.PluginID) (*graphql.Plugin, error) {
	res, errs := l.fetch([]id.PluginID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryPluginLoader) LoadAll(keys []id.PluginID) ([]*graphql.Plugin, []error) {
	return l.fetch(keys)
}

type ProjectDataLoader interface {
	Load(id.ProjectID) (*graphql.Project, error)
	LoadAll([]id.ProjectID) ([]*graphql.Project, []error)
}

func newProject(ctx context.Context, c *graphql.ProjectController, o *usecase.Operator) *ProjectLoader {
	return NewProjectLoader(ProjectLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.ProjectID) ([]*graphql.Project, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryProject(ctx context.Context, c *graphql.ProjectController, o *usecase.Operator) ProjectDataLoader {
	return &ordinaryProjectLoader{
		fetch: func(keys []id.ProjectID) ([]*graphql.Project, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryProjectLoader struct {
	fetch func(keys []id.ProjectID) ([]*graphql.Project, []error)
}

func (l *ordinaryProjectLoader) Load(key id.ProjectID) (*graphql.Project, error) {
	res, errs := l.fetch([]id.ProjectID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryProjectLoader) LoadAll(keys []id.ProjectID) ([]*graphql.Project, []error) {
	return l.fetch(keys)
}

type PropertyDataLoader interface {
	Load(id.PropertyID) (*graphql.Property, error)
	LoadAll([]id.PropertyID) ([]*graphql.Property, []error)
}

func newProperty(ctx context.Context, c *graphql.PropertyController, o *usecase.Operator) *PropertyLoader {
	return NewPropertyLoader(PropertyLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.PropertyID) ([]*graphql.Property, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryProperty(ctx context.Context, c *graphql.PropertyController, o *usecase.Operator) PropertyDataLoader {
	return &ordinaryPropertyLoader{
		fetch: func(keys []id.PropertyID) ([]*graphql.Property, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryPropertyLoader struct {
	fetch func(keys []id.PropertyID) ([]*graphql.Property, []error)
}

func (l *ordinaryPropertyLoader) Load(key id.PropertyID) (*graphql.Property, error) {
	res, errs := l.fetch([]id.PropertyID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryPropertyLoader) LoadAll(keys []id.PropertyID) ([]*graphql.Property, []error) {
	return l.fetch(keys)
}

type SceneDataLoader interface {
	Load(id.SceneID) (*graphql.Scene, error)
	LoadAll([]id.SceneID) ([]*graphql.Scene, []error)
}

func newScene(ctx context.Context, c *graphql.SceneController, o *usecase.Operator) *SceneLoader {
	return NewSceneLoader(SceneLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.SceneID) ([]*graphql.Scene, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryScene(ctx context.Context, c *graphql.SceneController, o *usecase.Operator) SceneDataLoader {
	return &ordinarySceneLoader{
		fetch: func(keys []id.SceneID) ([]*graphql.Scene, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinarySceneLoader struct {
	fetch func(keys []id.SceneID) ([]*graphql.Scene, []error)
}

func (l *ordinarySceneLoader) Load(key id.SceneID) (*graphql.Scene, error) {
	res, errs := l.fetch([]id.SceneID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinarySceneLoader) LoadAll(keys []id.SceneID) ([]*graphql.Scene, []error) {
	return l.fetch(keys)
}

type TeamDataLoader interface {
	Load(id.TeamID) (*graphql.Team, error)
	LoadAll([]id.TeamID) ([]*graphql.Team, []error)
}

func newTeam(ctx context.Context, c *graphql.TeamController, o *usecase.Operator) *TeamLoader {
	return NewTeamLoader(TeamLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.TeamID) ([]*graphql.Team, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryTeam(ctx context.Context, c *graphql.TeamController, o *usecase.Operator) TeamDataLoader {
	return &ordinaryTeamLoader{
		fetch: func(keys []id.TeamID) ([]*graphql.Team, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryTeamLoader struct {
	fetch func(keys []id.TeamID) ([]*graphql.Team, []error)
}

func (l *ordinaryTeamLoader) Load(key id.TeamID) (*graphql.Team, error) {
	res, errs := l.fetch([]id.TeamID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryTeamLoader) LoadAll(keys []id.TeamID) ([]*graphql.Team, []error) {
	return l.fetch(keys)
}

type UserDataLoader interface {
	Load(id.UserID) (*graphql.User, error)
	LoadAll([]id.UserID) ([]*graphql.User, []error)
}

func newUser(ctx context.Context, c *graphql.UserController, o *usecase.Operator) *UserLoader {
	return NewUserLoader(UserLoaderConfig{
		Wait:     1 * time.Millisecond,
		MaxBatch: 100,
		Fetch: func(keys []id.UserID) ([]*graphql.User, []error) {
			return c.Fetch(ctx, keys, o)
		},
	})
}

func newOrdinaryUser(ctx context.Context, c *graphql.UserController, o *usecase.Operator) UserDataLoader {
	return &ordinaryUserLoader{
		fetch: func(keys []id.UserID) ([]*graphql.User, []error) {
			return c.Fetch(ctx, keys, o)
		},
	}
}

type ordinaryUserLoader struct {
	fetch func(keys []id.UserID) ([]*graphql.User, []error)
}

func (l *ordinaryUserLoader) Load(key id.UserID) (*graphql.User, error) {
	res, errs := l.fetch([]id.UserID{key})
	if len(errs) > 0 {
		return nil, errs[0]
	}
	if len(res) > 0 {
		return res[0], nil
	}
	return nil, nil
}

func (l *ordinaryUserLoader) LoadAll(keys []id.UserID) ([]*graphql.User, []error) {
	return l.fetch(keys)
}
